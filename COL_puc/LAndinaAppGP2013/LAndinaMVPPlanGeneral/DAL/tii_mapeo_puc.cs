
/*
'===============================================================================
'  Generated From - CSharp_dOOdads_BusinessEntity.vbgen
' 
'  ** IMPORTANT  ** 
'  How to Generate your stored procedures:
' 
'  SQL        = SQL_StoredProcs.vbgen
'  ACCESS     = Access_StoredProcs.vbgen
'  ORACLE     = Oracle_StoredProcs.vbgen
'  FIREBIRD   = FirebirdStoredProcs.vbgen
'  POSTGRESQL = PostgreSQL_StoredProcs.vbgen
'
'  The supporting base class SqlClientEntity is in the Architecture directory in "dOOdads".
'  
'  This object is 'abstract' which means you need to inherit from it to be able
'  to instantiate it.  This is very easilly done. You can override properties and
'  methods in your derived class, this allows you to regenerate this class at any
'  time and not worry about overwriting custom code. 
'
'  NEVER EDIT THIS FILE.
'
'  public class YourObject :  _YourObject
'  {
'
'  }
'
'===============================================================================
*/

// Generated by MyGeneration Version # (1.3.0.3)

using System;
using System.Data;
using System.Data.SqlClient;
using System.Collections;
using System.Collections.Specialized;

using MyGeneration.dOOdads;

namespace MVP.gpCustom
{
	public abstract class _tii_mapeo_puc : SqlClientEntity
	{
		public _tii_mapeo_puc()
		{
			this.QuerySource = "tii_mapeo_puc";
			this.MappingName = "tii_mapeo_puc";

		}	

		//=================================================================
		//  public Overrides void AddNew()
		//=================================================================
		//
		//=================================================================
		public override void AddNew()
		{
			base.AddNew();
			
		}
		
		
		public override void FlushData()
		{
			this._whereClause = null;
			this._aggregateClause = null;
			base.FlushData();
		}
		
		//=================================================================
		//  	public Function LoadAll() As Boolean
		//=================================================================
		//  Loads all of the records in the database, and sets the currentRow to the first row
		//=================================================================
		public bool LoadAll() 
		{
			ListDictionary parameters = null;
			
			return base.LoadFromSql("[" + this.SchemaStoredProcedure + "proc_tii_mapeo_pucLoadAll]", parameters);
		}
	
		//=================================================================
		// public Overridable Function LoadByPrimaryKey()  As Boolean
		//=================================================================
		//  Loads a single row of via the primary key
		//=================================================================
		public virtual bool LoadByPrimaryKey(string Cuentagp, string Codigopuc)
		{
			ListDictionary parameters = new ListDictionary();
			parameters.Add(Parameters.Cuentagp, Cuentagp);

parameters.Add(Parameters.Codigopuc, Codigopuc);

		
			return base.LoadFromSql("[" + this.SchemaStoredProcedure + "proc_tii_mapeo_pucLoadByPrimaryKey]", parameters);
		}
		
		#region Parameters
		protected class Parameters
		{
			
			public static SqlParameter Cuentagp
			{
				get
				{
					return new SqlParameter("@Cuentagp", SqlDbType.VarChar, 50);
				}
			}
			
			public static SqlParameter Textoingles
			{
				get
				{
					return new SqlParameter("@Textoingles", SqlDbType.VarChar, 100);
				}
			}
			
			public static SqlParameter Obs
			{
				get
				{
					return new SqlParameter("@Obs", SqlDbType.VarChar, 100);
				}
			}
			
			public static SqlParameter Textoespa
			{
				get
				{
					return new SqlParameter("@Textoespa", SqlDbType.VarChar, 100);
				}
			}
			
			public static SqlParameter Obs2
			{
				get
				{
					return new SqlParameter("@Obs2", SqlDbType.VarChar, 50);
				}
			}
			
			public static SqlParameter Codigopuc
			{
				get
				{
					return new SqlParameter("@Codigopuc", SqlDbType.VarChar, 50);
				}
			}
			
			public static SqlParameter Textopuc
			{
				get
				{
					return new SqlParameter("@Textopuc", SqlDbType.VarChar, 100);
				}
			}
			
			public static SqlParameter Nivel
			{
				get
				{
					return new SqlParameter("@Nivel", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter DescNivel
			{
				get
				{
					return new SqlParameter("@DescNivel", SqlDbType.VarChar, 100);
				}
			}
			
			public static SqlParameter Procesado
			{
				get
				{
					return new SqlParameter("@Procesado", SqlDbType.VarChar, 1);
				}
			}
			
		}
		#endregion		
	
		#region ColumnNames
		public class ColumnNames
		{  
            public const string Cuentagp = "cuentagp";
            public const string Textoingles = "textoingles";
            public const string Obs = "obs";
            public const string Textoespa = "textoespa";
            public const string Obs2 = "obs2";
            public const string Codigopuc = "codigopuc";
            public const string Textopuc = "textopuc";
            public const string Nivel = "nivel";
            public const string DescNivel = "descNivel";
            public const string Procesado = "procesado";

			static public string ToPropertyName(string columnName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[Cuentagp] = _tii_mapeo_puc.PropertyNames.Cuentagp;
					ht[Textoingles] = _tii_mapeo_puc.PropertyNames.Textoingles;
					ht[Obs] = _tii_mapeo_puc.PropertyNames.Obs;
					ht[Textoespa] = _tii_mapeo_puc.PropertyNames.Textoespa;
					ht[Obs2] = _tii_mapeo_puc.PropertyNames.Obs2;
					ht[Codigopuc] = _tii_mapeo_puc.PropertyNames.Codigopuc;
					ht[Textopuc] = _tii_mapeo_puc.PropertyNames.Textopuc;
					ht[Nivel] = _tii_mapeo_puc.PropertyNames.Nivel;
					ht[DescNivel] = _tii_mapeo_puc.PropertyNames.DescNivel;
					ht[Procesado] = _tii_mapeo_puc.PropertyNames.Procesado;

				}
				return (string)ht[columnName];
			}

			static private Hashtable ht = null;			 
		}
		#endregion
		
		#region PropertyNames
		public class PropertyNames
		{  
            public const string Cuentagp = "Cuentagp";
            public const string Textoingles = "Textoingles";
            public const string Obs = "Obs";
            public const string Textoespa = "Textoespa";
            public const string Obs2 = "Obs2";
            public const string Codigopuc = "Codigopuc";
            public const string Textopuc = "Textopuc";
            public const string Nivel = "Nivel";
            public const string DescNivel = "DescNivel";
            public const string Procesado = "Procesado";

			static public string ToColumnName(string propertyName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[Cuentagp] = _tii_mapeo_puc.ColumnNames.Cuentagp;
					ht[Textoingles] = _tii_mapeo_puc.ColumnNames.Textoingles;
					ht[Obs] = _tii_mapeo_puc.ColumnNames.Obs;
					ht[Textoespa] = _tii_mapeo_puc.ColumnNames.Textoespa;
					ht[Obs2] = _tii_mapeo_puc.ColumnNames.Obs2;
					ht[Codigopuc] = _tii_mapeo_puc.ColumnNames.Codigopuc;
					ht[Textopuc] = _tii_mapeo_puc.ColumnNames.Textopuc;
					ht[Nivel] = _tii_mapeo_puc.ColumnNames.Nivel;
					ht[DescNivel] = _tii_mapeo_puc.ColumnNames.DescNivel;
					ht[Procesado] = _tii_mapeo_puc.ColumnNames.Procesado;

				}
				return (string)ht[propertyName];
			}

			static private Hashtable ht = null;			 
		}			 
		#endregion	

		#region StringPropertyNames
		public class StringPropertyNames
		{  
            public const string Cuentagp = "s_Cuentagp";
            public const string Textoingles = "s_Textoingles";
            public const string Obs = "s_Obs";
            public const string Textoespa = "s_Textoespa";
            public const string Obs2 = "s_Obs2";
            public const string Codigopuc = "s_Codigopuc";
            public const string Textopuc = "s_Textopuc";
            public const string Nivel = "s_Nivel";
            public const string DescNivel = "s_DescNivel";
            public const string Procesado = "s_Procesado";

		}
		#endregion		
		
		#region Properties
	
		public virtual string Cuentagp
	    {
			get
	        {
				return base.Getstring(ColumnNames.Cuentagp);
			}
			set
	        {
				base.Setstring(ColumnNames.Cuentagp, value);
			}
		}

		public virtual string Textoingles
	    {
			get
	        {
				return base.Getstring(ColumnNames.Textoingles);
			}
			set
	        {
				base.Setstring(ColumnNames.Textoingles, value);
			}
		}

		public virtual string Obs
	    {
			get
	        {
				return base.Getstring(ColumnNames.Obs);
			}
			set
	        {
				base.Setstring(ColumnNames.Obs, value);
			}
		}

		public virtual string Textoespa
	    {
			get
	        {
				return base.Getstring(ColumnNames.Textoespa);
			}
			set
	        {
				base.Setstring(ColumnNames.Textoespa, value);
			}
		}

		public virtual string Obs2
	    {
			get
	        {
				return base.Getstring(ColumnNames.Obs2);
			}
			set
	        {
				base.Setstring(ColumnNames.Obs2, value);
			}
		}

		public virtual string Codigopuc
	    {
			get
	        {
				return base.Getstring(ColumnNames.Codigopuc);
			}
			set
	        {
				base.Setstring(ColumnNames.Codigopuc, value);
			}
		}

		public virtual string Textopuc
	    {
			get
	        {
				return base.Getstring(ColumnNames.Textopuc);
			}
			set
	        {
				base.Setstring(ColumnNames.Textopuc, value);
			}
		}

		public virtual int Nivel
	    {
			get
	        {
				return base.Getint(ColumnNames.Nivel);
			}
			set
	        {
				base.Setint(ColumnNames.Nivel, value);
			}
		}

		public virtual string DescNivel
	    {
			get
	        {
				return base.Getstring(ColumnNames.DescNivel);
			}
			set
	        {
				base.Setstring(ColumnNames.DescNivel, value);
			}
		}

		public virtual string Procesado
	    {
			get
	        {
				return base.Getstring(ColumnNames.Procesado);
			}
			set
	        {
				base.Setstring(ColumnNames.Procesado, value);
			}
		}


		#endregion
		
		#region String Properties
	
		public virtual string s_Cuentagp
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Cuentagp) ? string.Empty : base.GetstringAsString(ColumnNames.Cuentagp);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Cuentagp);
				else
					this.Cuentagp = base.SetstringAsString(ColumnNames.Cuentagp, value);
			}
		}

		public virtual string s_Textoingles
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Textoingles) ? string.Empty : base.GetstringAsString(ColumnNames.Textoingles);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Textoingles);
				else
					this.Textoingles = base.SetstringAsString(ColumnNames.Textoingles, value);
			}
		}

		public virtual string s_Obs
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Obs) ? string.Empty : base.GetstringAsString(ColumnNames.Obs);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Obs);
				else
					this.Obs = base.SetstringAsString(ColumnNames.Obs, value);
			}
		}

		public virtual string s_Textoespa
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Textoespa) ? string.Empty : base.GetstringAsString(ColumnNames.Textoespa);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Textoespa);
				else
					this.Textoespa = base.SetstringAsString(ColumnNames.Textoespa, value);
			}
		}

		public virtual string s_Obs2
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Obs2) ? string.Empty : base.GetstringAsString(ColumnNames.Obs2);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Obs2);
				else
					this.Obs2 = base.SetstringAsString(ColumnNames.Obs2, value);
			}
		}

		public virtual string s_Codigopuc
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Codigopuc) ? string.Empty : base.GetstringAsString(ColumnNames.Codigopuc);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Codigopuc);
				else
					this.Codigopuc = base.SetstringAsString(ColumnNames.Codigopuc, value);
			}
		}

		public virtual string s_Textopuc
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Textopuc) ? string.Empty : base.GetstringAsString(ColumnNames.Textopuc);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Textopuc);
				else
					this.Textopuc = base.SetstringAsString(ColumnNames.Textopuc, value);
			}
		}

		public virtual string s_Nivel
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Nivel) ? string.Empty : base.GetintAsString(ColumnNames.Nivel);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Nivel);
				else
					this.Nivel = base.SetintAsString(ColumnNames.Nivel, value);
			}
		}

		public virtual string s_DescNivel
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.DescNivel) ? string.Empty : base.GetstringAsString(ColumnNames.DescNivel);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.DescNivel);
				else
					this.DescNivel = base.SetstringAsString(ColumnNames.DescNivel, value);
			}
		}

		public virtual string s_Procesado
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Procesado) ? string.Empty : base.GetstringAsString(ColumnNames.Procesado);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Procesado);
				else
					this.Procesado = base.SetstringAsString(ColumnNames.Procesado, value);
			}
		}


		#endregion		
	
		#region Where Clause
		public class WhereClause
		{
			public WhereClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffWhereParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffWhereParameter(this);
					}

					return _tearOff;
				}
			}

			#region WhereParameter TearOff's
			public class TearOffWhereParameter
			{
				public TearOffWhereParameter(WhereClause clause)
				{
					this._clause = clause;
				}
				
				
				public WhereParameter Cuentagp
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Cuentagp, Parameters.Cuentagp);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Textoingles
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Textoingles, Parameters.Textoingles);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Obs
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Obs, Parameters.Obs);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Textoespa
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Textoespa, Parameters.Textoespa);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Obs2
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Obs2, Parameters.Obs2);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Codigopuc
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Codigopuc, Parameters.Codigopuc);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Textopuc
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Textopuc, Parameters.Textopuc);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Nivel
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Nivel, Parameters.Nivel);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter DescNivel
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.DescNivel, Parameters.DescNivel);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Procesado
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Procesado, Parameters.Procesado);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}


				private WhereClause _clause;
			}
			#endregion
		
			public WhereParameter Cuentagp
		    {
				get
		        {
					if(_Cuentagp_W == null)
	        	    {
						_Cuentagp_W = TearOff.Cuentagp;
					}
					return _Cuentagp_W;
				}
			}

			public WhereParameter Textoingles
		    {
				get
		        {
					if(_Textoingles_W == null)
	        	    {
						_Textoingles_W = TearOff.Textoingles;
					}
					return _Textoingles_W;
				}
			}

			public WhereParameter Obs
		    {
				get
		        {
					if(_Obs_W == null)
	        	    {
						_Obs_W = TearOff.Obs;
					}
					return _Obs_W;
				}
			}

			public WhereParameter Textoespa
		    {
				get
		        {
					if(_Textoespa_W == null)
	        	    {
						_Textoespa_W = TearOff.Textoespa;
					}
					return _Textoespa_W;
				}
			}

			public WhereParameter Obs2
		    {
				get
		        {
					if(_Obs2_W == null)
	        	    {
						_Obs2_W = TearOff.Obs2;
					}
					return _Obs2_W;
				}
			}

			public WhereParameter Codigopuc
		    {
				get
		        {
					if(_Codigopuc_W == null)
	        	    {
						_Codigopuc_W = TearOff.Codigopuc;
					}
					return _Codigopuc_W;
				}
			}

			public WhereParameter Textopuc
		    {
				get
		        {
					if(_Textopuc_W == null)
	        	    {
						_Textopuc_W = TearOff.Textopuc;
					}
					return _Textopuc_W;
				}
			}

			public WhereParameter Nivel
		    {
				get
		        {
					if(_Nivel_W == null)
	        	    {
						_Nivel_W = TearOff.Nivel;
					}
					return _Nivel_W;
				}
			}

			public WhereParameter DescNivel
		    {
				get
		        {
					if(_DescNivel_W == null)
	        	    {
						_DescNivel_W = TearOff.DescNivel;
					}
					return _DescNivel_W;
				}
			}

			public WhereParameter Procesado
		    {
				get
		        {
					if(_Procesado_W == null)
	        	    {
						_Procesado_W = TearOff.Procesado;
					}
					return _Procesado_W;
				}
			}

			private WhereParameter _Cuentagp_W = null;
			private WhereParameter _Textoingles_W = null;
			private WhereParameter _Obs_W = null;
			private WhereParameter _Textoespa_W = null;
			private WhereParameter _Obs2_W = null;
			private WhereParameter _Codigopuc_W = null;
			private WhereParameter _Textopuc_W = null;
			private WhereParameter _Nivel_W = null;
			private WhereParameter _DescNivel_W = null;
			private WhereParameter _Procesado_W = null;

			public void WhereClauseReset()
			{
				_Cuentagp_W = null;
				_Textoingles_W = null;
				_Obs_W = null;
				_Textoespa_W = null;
				_Obs2_W = null;
				_Codigopuc_W = null;
				_Textopuc_W = null;
				_Nivel_W = null;
				_DescNivel_W = null;
				_Procesado_W = null;

				this._entity.Query.FlushWhereParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffWhereParameter _tearOff;
			
		}
	
		public WhereClause Where
		{
			get
			{
				if(_whereClause == null)
				{
					_whereClause = new WhereClause(this);
				}
		
				return _whereClause;
			}
		}
		
		private WhereClause _whereClause = null;	
		#endregion
	
		#region Aggregate Clause
		public class AggregateClause
		{
			public AggregateClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffAggregateParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffAggregateParameter(this);
					}

					return _tearOff;
				}
			}

			#region AggregateParameter TearOff's
			public class TearOffAggregateParameter
			{
				public TearOffAggregateParameter(AggregateClause clause)
				{
					this._clause = clause;
				}
				
				
				public AggregateParameter Cuentagp
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Cuentagp, Parameters.Cuentagp);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Textoingles
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Textoingles, Parameters.Textoingles);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Obs
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Obs, Parameters.Obs);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Textoespa
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Textoespa, Parameters.Textoespa);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Obs2
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Obs2, Parameters.Obs2);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Codigopuc
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Codigopuc, Parameters.Codigopuc);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Textopuc
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Textopuc, Parameters.Textopuc);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Nivel
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Nivel, Parameters.Nivel);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter DescNivel
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.DescNivel, Parameters.DescNivel);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Procesado
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Procesado, Parameters.Procesado);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}


				private AggregateClause _clause;
			}
			#endregion
		
			public AggregateParameter Cuentagp
		    {
				get
		        {
					if(_Cuentagp_W == null)
	        	    {
						_Cuentagp_W = TearOff.Cuentagp;
					}
					return _Cuentagp_W;
				}
			}

			public AggregateParameter Textoingles
		    {
				get
		        {
					if(_Textoingles_W == null)
	        	    {
						_Textoingles_W = TearOff.Textoingles;
					}
					return _Textoingles_W;
				}
			}

			public AggregateParameter Obs
		    {
				get
		        {
					if(_Obs_W == null)
	        	    {
						_Obs_W = TearOff.Obs;
					}
					return _Obs_W;
				}
			}

			public AggregateParameter Textoespa
		    {
				get
		        {
					if(_Textoespa_W == null)
	        	    {
						_Textoespa_W = TearOff.Textoespa;
					}
					return _Textoespa_W;
				}
			}

			public AggregateParameter Obs2
		    {
				get
		        {
					if(_Obs2_W == null)
	        	    {
						_Obs2_W = TearOff.Obs2;
					}
					return _Obs2_W;
				}
			}

			public AggregateParameter Codigopuc
		    {
				get
		        {
					if(_Codigopuc_W == null)
	        	    {
						_Codigopuc_W = TearOff.Codigopuc;
					}
					return _Codigopuc_W;
				}
			}

			public AggregateParameter Textopuc
		    {
				get
		        {
					if(_Textopuc_W == null)
	        	    {
						_Textopuc_W = TearOff.Textopuc;
					}
					return _Textopuc_W;
				}
			}

			public AggregateParameter Nivel
		    {
				get
		        {
					if(_Nivel_W == null)
	        	    {
						_Nivel_W = TearOff.Nivel;
					}
					return _Nivel_W;
				}
			}

			public AggregateParameter DescNivel
		    {
				get
		        {
					if(_DescNivel_W == null)
	        	    {
						_DescNivel_W = TearOff.DescNivel;
					}
					return _DescNivel_W;
				}
			}

			public AggregateParameter Procesado
		    {
				get
		        {
					if(_Procesado_W == null)
	        	    {
						_Procesado_W = TearOff.Procesado;
					}
					return _Procesado_W;
				}
			}

			private AggregateParameter _Cuentagp_W = null;
			private AggregateParameter _Textoingles_W = null;
			private AggregateParameter _Obs_W = null;
			private AggregateParameter _Textoespa_W = null;
			private AggregateParameter _Obs2_W = null;
			private AggregateParameter _Codigopuc_W = null;
			private AggregateParameter _Textopuc_W = null;
			private AggregateParameter _Nivel_W = null;
			private AggregateParameter _DescNivel_W = null;
			private AggregateParameter _Procesado_W = null;

			public void AggregateClauseReset()
			{
				_Cuentagp_W = null;
				_Textoingles_W = null;
				_Obs_W = null;
				_Textoespa_W = null;
				_Obs2_W = null;
				_Codigopuc_W = null;
				_Textopuc_W = null;
				_Nivel_W = null;
				_DescNivel_W = null;
				_Procesado_W = null;

				this._entity.Query.FlushAggregateParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffAggregateParameter _tearOff;
			
		}
	
		public AggregateClause Aggregate
		{
			get
			{
				if(_aggregateClause == null)
				{
					_aggregateClause = new AggregateClause(this);
				}
		
				return _aggregateClause;
			}
		}
		
		private AggregateClause _aggregateClause = null;	
		#endregion
	
		protected override IDbCommand GetInsertCommand() 
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_tii_mapeo_pucInsert]";
	
			CreateParameters(cmd);
			    
			return cmd;
		}
	
		protected override IDbCommand GetUpdateCommand()
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_tii_mapeo_pucUpdate]";
	
			CreateParameters(cmd);
			      
			return cmd;
		}
	
		protected override IDbCommand GetDeleteCommand()
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_tii_mapeo_pucDelete]";
	
			SqlParameter p;
			p = cmd.Parameters.Add(Parameters.Cuentagp);
			p.SourceColumn = ColumnNames.Cuentagp;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Codigopuc);
			p.SourceColumn = ColumnNames.Codigopuc;
			p.SourceVersion = DataRowVersion.Current;

  
			return cmd;
		}
		
		private IDbCommand CreateParameters(SqlCommand cmd)
		{
			SqlParameter p;
		
			p = cmd.Parameters.Add(Parameters.Cuentagp);
			p.SourceColumn = ColumnNames.Cuentagp;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Textoingles);
			p.SourceColumn = ColumnNames.Textoingles;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Obs);
			p.SourceColumn = ColumnNames.Obs;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Textoespa);
			p.SourceColumn = ColumnNames.Textoespa;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Obs2);
			p.SourceColumn = ColumnNames.Obs2;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Codigopuc);
			p.SourceColumn = ColumnNames.Codigopuc;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Textopuc);
			p.SourceColumn = ColumnNames.Textopuc;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Nivel);
			p.SourceColumn = ColumnNames.Nivel;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.DescNivel);
			p.SourceColumn = ColumnNames.DescNivel;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Procesado);
			p.SourceColumn = ColumnNames.Procesado;
			p.SourceVersion = DataRowVersion.Current;


			return cmd;
		}
	}
}
